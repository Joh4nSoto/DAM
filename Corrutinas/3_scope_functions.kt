// =============================================================================
// EJEMPLO: FUNCIONES DE √ÅMBITO (Scope Functions)
// =============================================================================
// Las funciones de √°mbito permiten ejecutar bloques de c√≥digo en el contexto
// de un objeto. Las principales son: apply, let, run, with, also

data class Configuracion(
    var servidor: String = "",
    var puerto: Int = 0,
    var ssl: Boolean = false,
    var timeout: Int = 30
)

data class PerfilUsuario(
    val nombre: String,
    val edad: Int,
    val email: String?
)

class ServicioDatos {
    fun obtenerDatos(): String? {
        // Simula que a veces no hay datos
        return if ((1..10).random() > 3) "Datos importantes" else null
    }
}

fun main() {
    println("üîß === FUNCIONES DE √ÅMBITO (SCOPE FUNCTIONS) ===\n")
    
    // -------------------------------------------------------------------------
    // 1. APPLY - Configura un objeto y lo devuelve
    // -------------------------------------------------------------------------
    println("üõ†Ô∏è === APPLY ===")
    println("‚Ä¢ Usa 'this' para referenciar el objeto")
    println("‚Ä¢ Devuelve el mismo objeto")
    println("‚Ä¢ Ideal para configuraci√≥n/inicializaci√≥n")
    
    val config = Configuracion().apply {
        // 'this' se refiere al objeto Configuracion
        servidor = "api.miapp.com"
        puerto = 8080
        ssl = true
        timeout = 60
        println("üîß Configurando servidor: $servidor:$puerto")
    }
    
    println("Configuraci√≥n final: $config")
    println()
    
    // -------------------------------------------------------------------------
    // 2. LET - Opera con objeto no-null y devuelve resultado
    // -------------------------------------------------------------------------
    println("üîç === LET ===")
    println("‚Ä¢ Usa 'it' para referenciar el objeto")
    println("‚Ä¢ Devuelve el resultado del bloque")
    println("‚Ä¢ Ideal para operaciones con objetos nullable")
    
    val email1: String? = "usuario@email.com"
    val email2: String? = null
    
    val resultado1 = email1?.let { emailNoNull ->
        // 'it' o el par√°metro nombrado se refiere al objeto no-null
        println("‚úÖ Email v√°lido: $emailNoNull")
        "Email procesado: ${emailNoNull.uppercase()}"
    } ?: "‚ùå Email nulo"
    
    val resultado2 = email2?.let { emailNoNull ->
        println("‚úÖ Email v√°lido: $emailNoNull")
        "Email procesado: ${emailNoNull.uppercase()}"
    } ?: "‚ùå Email nulo"
    
    println("Resultado 1: $resultado1")
    println("Resultado 2: $resultado2")
    println()
    
    // -------------------------------------------------------------------------
    // 3. RUN - Ejecuta c√≥digo y devuelve resultado
    // -------------------------------------------------------------------------
    println("üèÉ === RUN ===")
    println("‚Ä¢ Usa 'this' para referenciar el objeto")
    println("‚Ä¢ Devuelve el resultado del bloque")
    println("‚Ä¢ Ideal para c√°lculos basados en propiedades del objeto")
    
    val perfil = PerfilUsuario("Mar√≠a Gonz√°lez", 28, "maria@email.com")
    
    val descripcion = perfil.run {
        // 'this' se refiere al objeto perfil
        val categoria = when {
            edad < 18 -> "Menor"
            edad < 60 -> "Adulto"
            else -> "Adulto Mayor"
        }
        "üë§ $nombre ($categoria) - Email: ${email ?: "No disponible"}"
    }
    
    println("Descripci√≥n generada: $descripcion")
    println()
    
    // -------------------------------------------------------------------------
    // 4. WITH - Similar a run pero no es funci√≥n de extensi√≥n
    // -------------------------------------------------------------------------
    println("ü§ù === WITH ===")
    println("‚Ä¢ No es funci√≥n de extensi√≥n")
    println("‚Ä¢ Usa 'this' para referenciar el objeto")
    println("‚Ä¢ Ideal cuando ya tienes el objeto como par√°metro")
    
    val resumenConfig = with(config) {
        // 'this' se refiere al objeto config
        """
        üåê Configuraci√≥n del servidor:
        üìç URL: ${if (ssl) "https" else "http"}://$servidor:$puerto
        ‚è±Ô∏è Timeout: $timeout segundos
        üîí SSL: ${if (ssl) "Habilitado" else "Deshabilitado"}
        """.trimIndent()
    }
    
    println(resumenConfig)
    println()
    
    // -------------------------------------------------------------------------
    // 5. ALSO - Ejecuta c√≥digo adicional sin cambiar el objeto
    // -------------------------------------------------------------------------
    println("‚ûï === ALSO ===")
    println("‚Ä¢ Usa 'it' para referenciar el objeto")
    println("‚Ä¢ Devuelve el mismo objeto")
    println("‚Ä¢ Ideal para acciones adicionales (logging, validaci√≥n)")
    
    val usuarioFinal = perfil
        .also { println("üîç Validando usuario: ${it.nombre}") }
        .also { println("üìß Verificando email: ${it.email}") }
        .also { println("üéÇ Edad verificada: ${it.edad} a√±os") }
    
    println("Usuario final: $usuarioFinal")
    println()
    
    // -------------------------------------------------------------------------
    // EJEMPLO PR√ÅCTICO: Combinando scope functions
    // -------------------------------------------------------------------------
    println("üéØ === EJEMPLO PR√ÅCTICO COMBINADO ===")
    
    val servicio = ServicioDatos()
    
    val resultado = servicio.obtenerDatos()?.let { datos ->
        // LET: procesa datos si no son null
        println("üìÑ Datos recibidos: $datos")
        datos.uppercase()
    }?.also { datosProcessados ->
        // ALSO: logging adicional sin cambiar el resultado
        println("üìä Datos procesados: $datosProcessados")
    } ?: run {
        // RUN: maneja el caso null
        println("‚ö†Ô∏è No se encontraron datos")
        "SIN DATOS"
    }
    
    println("üéÅ Resultado final: $resultado")
    
    println("\nüìö RESUMEN SCOPE FUNCTIONS:")
    println("‚Ä¢ APPLY: configura objeto, devuelve objeto (this)")
    println("‚Ä¢ LET: procesa objeto no-null, devuelve resultado (it)")
    println("‚Ä¢ RUN: ejecuta c√≥digo, devuelve resultado (this)")
    println("‚Ä¢ WITH: como run pero no es extensi√≥n")
    println("‚Ä¢ ALSO: acci√≥n adicional, devuelve objeto (it)")
}
